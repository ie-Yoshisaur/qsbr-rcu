use crate::thread_data::{rcu_dereference, rcu_read_lock, rcu_read_unlock};
use std::ptr;
use std::sync::atomic::{AtomicPtr, Ordering};

/// Represents a callback structure used for deferred cleanup in RCU.
/// Each callback contains a function pointer (`func`) and associated data (`data`) to be processed later.
///
/// `Callback` forms a linked list through the `next` field, enabling multiple callbacks to be queued.
struct Callback<T> {
    func: fn(*mut T),             // Function to process or free the data.
    data: *mut T,                 // Pointer to the associated data.
    next: AtomicPtr<Callback<T>>, // Pointer to the next callback in the queue.
}

/// A lock-free synchronization structure based on Read-Copy-Update (RCU).
///
/// RCU allows readers to access shared data without blocking, while writers perform updates by
/// creating new versions of the data and replacing the old pointer atomically. Readers are guaranteed
/// to see either the old or the new version of the data.
///
/// This implementation also supports deferred cleanup of old data through callbacks.
///
/// # Examples
///
/// ```rust
/// use std::thread;
/// use std::sync::Arc;
/// use read_copy_update::Rcu;
///
/// // Create a new RCU instance wrapped in Arc for shared ownership across threads.
/// let rcu = Arc::new(Rcu::new(42));
///
/// // Reader thread accesses the current value.
/// let rcu_clone = Arc::clone(&rcu);
/// let reader = thread::spawn(move || {
///     rcu_clone.read(|val| {
///         println!("Read value: {}", val);
///     }).expect("Failed to read value");
/// });
///
/// // Updater thread increments the value.
/// let rcu_clone = Arc::clone(&rcu);
/// let updater = thread::spawn(move || {
///     rcu_clone.try_update(|val| val + 1).expect("Update failed");
///     println!("Value incremented.");
/// });
///
/// reader.join().unwrap();
/// updater.join().unwrap();
/// ```
pub struct Rcu<T> {
    ptr: AtomicPtr<T>, // Atomic pointer to the currently accessible data.
    callbacks: AtomicPtr<Callback<T>>, // Atomic pointer to the callback list for deferred cleanup.
}

impl<T> Rcu<T> {
    /// Creates a new RCU instance by allocating the provided data on the heap.
    ///
    /// This method ensures that the data is managed in a way compatible with RCU's requirements.
    ///
    /// # Examples
    ///
    /// ```rust
    /// use read_copy_update::Rcu;
    ///
    /// let rcu = Rcu::new(42); // Initialize RCU with the value 42.
    /// ```
    pub fn new(data: T) -> Self {
        let boxed = Box::new(data);
        Rcu {
            ptr: AtomicPtr::new(Box::into_raw(boxed)),
            callbacks: AtomicPtr::new(ptr::null_mut()),
        }
    }

    /// Reads the data protected by RCU in a read-side critical section.
    ///
    /// The provided closure is executed with a reference to the current data. If the pointer is null,
    /// an error is returned. This ensures safe access to RCU-protected data.
    ///
    /// # Examples
    ///
    /// ```rust
    /// use read_copy_update::Rcu;
    ///
    /// let rcu = Rcu::new(42);
    /// rcu.read(|val| println!("Value: {}", val)).unwrap();
    /// ```
    pub fn read<F, R>(&self, f: F) -> Result<R, ()>
    where
        F: FnOnce(&T) -> R,
    {
        rcu_read_lock();
        let ptr = rcu_dereference(&self.ptr);
        let result = unsafe {
            if ptr.is_null() {
                rcu_read_unlock();
                return Err(());
            }
            f(&*ptr)
        };
        rcu_read_unlock();
        Ok(result)
    }

    /// Updates the RCU-protected data using the provided closure.
    ///
    /// This method atomically replaces the current data with new data generated by the closure. The
    /// old data is safely reclaimed using deferred cleanup.
    ///
    /// # Examples
    ///
    /// ```rust
    /// use read_copy_update::Rcu;
    ///
    /// let rcu = Rcu::new(42);
    /// rcu.try_update(|val| val + 1).unwrap();
    /// ```
    pub fn try_update<F>(&self, f: F) -> Result<(), ()>
    where
        F: Fn(&T) -> T,
    {
        loop {
            let old_ptr = self.ptr.load(Ordering::SeqCst);
            if old_ptr.is_null() {
                return Err(());
            }
            let new_data = unsafe { f(&*old_ptr) };
            let new_box = Box::new(new_data);
            let new_ptr = Box::into_raw(new_box);

            match self
                .ptr
                .compare_exchange(old_ptr, new_ptr, Ordering::SeqCst, Ordering::SeqCst)
            {
                Ok(_) => {
                    self.add_callback(free_callback, old_ptr);
                    return Ok(());
                }
                Err(_) => unsafe { drop(Box::from_raw(new_ptr)) },
            }
        }
    }

    /// Registers a callback to reclaim the old data.
    fn add_callback(&self, func: fn(*mut T), data: *mut T) {
        let cb = Box::new(Callback {
            func,
            data,
            next: AtomicPtr::new(ptr::null_mut()),
        });
        let cb_ptr = Box::into_raw(cb);

        loop {
            let head = self.callbacks.load(Ordering::Acquire);
            unsafe {
                (*cb_ptr).next.store(head, Ordering::Relaxed);
            }
            if self
                .callbacks
                .compare_exchange(head, cb_ptr, Ordering::AcqRel, Ordering::Acquire)
                .is_ok()
            {
                break;
            }
        }
    }

    /// Processes all pending callbacks and executes them.
    ///
    /// This function should be called periodically to reclaim memory or perform other cleanup tasks
    /// for outdated RCU-protected data.
    ///
    /// # Examples
    ///
    /// ```rust
    /// use read_copy_update::Rcu;
    ///
    /// let rcu = Rcu::new(42);
    /// rcu.try_update(|val| val + 1).unwrap();
    /// rcu.process_callbacks();
    /// ```
    pub fn process_callbacks(&self) {
        let mut cb_ptr = self.callbacks.swap(ptr::null_mut(), Ordering::AcqRel);
        while !cb_ptr.is_null() {
            unsafe {
                let cb = Box::from_raw(cb_ptr);
                (cb.func)(cb.data);
                cb_ptr = cb.next.load(Ordering::Acquire);
            }
        }
    }
}

/// Default callback for freeing old data.
fn free_callback<T>(ptr: *mut T) {
    unsafe {
        drop(Box::from_raw(ptr));
    }
}
